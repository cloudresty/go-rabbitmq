name: Go Version Update Check

on:
  schedule:
    # Check for new Go versions every Tuesday at 3 AM UTC
    - cron: '0 3 * * 2'
  workflow_dispatch:

jobs:
  check-go-version:
    runs-on: ubuntu-latest
    outputs:
      has_new_version: ${{ steps.check.outputs.has_new_version }}
      current_version: ${{ steps.check.outputs.current_version }}
      latest_version: ${{ steps.check.outputs.latest_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Go versions
        id: check
        run: |
          # Get current Go version from go.mod
          CURRENT_GO_VERSION=$(grep "^go " go.mod | awk '{print $2}')
          echo "Current Go version in go.mod: $CURRENT_GO_VERSION"

          # Get latest stable Go version
          LATEST_GO_VERSION=$(curl -s "https://api.github.com/repos/golang/go/releases" | \
            jq -r '[.[] | select(.prerelease == false and .draft == false)] | .[0].tag_name' | \
            sed 's/go//')

          echo "Latest Go version: $LATEST_GO_VERSION"

          # Compare versions (only for minor/patch updates, not major)
          CURRENT_MAJOR=$(echo $CURRENT_GO_VERSION | cut -d. -f1)
          LATEST_MAJOR=$(echo $LATEST_GO_VERSION | cut -d. -f1)

          HAS_NEW_VERSION=false

          if [ "$CURRENT_MAJOR" = "$LATEST_MAJOR" ]; then
            if [ "$CURRENT_GO_VERSION" != "$LATEST_GO_VERSION" ]; then
              # Use sort -V to compare versions properly
              if [ "$(printf '%s\n%s' "$CURRENT_GO_VERSION" "$LATEST_GO_VERSION" | sort -V | head -1)" = "$CURRENT_GO_VERSION" ]; then
                HAS_NEW_VERSION=true
              fi
            fi
          fi

          echo "has_new_version=$HAS_NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_GO_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_GO_VERSION" >> $GITHUB_OUTPUT

  update-go-version:
    needs: check-go-version
    if: needs.check-go-version.outputs.has_new_version == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          token: ${{ secrets.CLOUDRESTY_GITBOT_PAT || secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update Go version
        run: |
          NEW_VERSION="${{ needs.check-go-version.outputs.latest_version }}"

          # Update go.mod
          sed -i "s/^go .*/go $NEW_VERSION/" go.mod

          # Update GitHub Actions workflows
          find .github/workflows -name "*.yaml" -exec sed -i "s/go-version: '[^']*'/go-version: '$NEW_VERSION'/g" {} \;
          find .github/workflows -name "*.yaml" -exec sed -i "s/go-version: [0-9.]\+/go-version: $NEW_VERSION/g" {} \;

      - name: Test with new Go version
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.check-go-version.outputs.latest_version }}

      - name: Run quick tests
        run: |
          go mod tidy
          go mod verify
          go test -short ./...

      - name: Commit and push changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git add .
          git commit -m "chore: update Go version to ${{ needs.check-go-version.outputs.latest_version }}

          - Updated go.mod Go version from ${{ needs.check-go-version.outputs.current_version }} to ${{ needs.check-go-version.outputs.latest_version }}
          - Updated GitHub Actions workflows to use new Go version
          - All tests passing with new version

          Auto-generated by Go version update workflow"

          git push origin develop

      - name: Trigger dependency update workflow
        env:
          GH_TOKEN: ${{ secrets.CLOUDRESTY_GITBOT_PAT || secrets.GITHUB_TOKEN }}
        run: |
          # Trigger dependency update workflow using GitHub CLI
          gh workflow run auto-dependency-update.yaml \
            --field force_update=true \
            --field reason="Go version updated from ${{ needs.check-go-version.outputs.current_version }} to ${{ needs.check-go-version.outputs.latest_version }}"

          echo "Triggered dependency update workflow after Go version update"
