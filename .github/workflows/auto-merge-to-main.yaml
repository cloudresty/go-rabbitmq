name: Auto Merge to Main

on:
  push:
    branches:
      - develop
  pull_request:
    types: [closed]
    branches:
      - develop

env:
  GO_VERSION: '1.24'

jobs:
  # Only run if this is a push to develop or a merged PR to develop
  check-trigger:
    name: Check Trigger Conditions
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
    steps:
      - name: Check if we should proceed
        id: check
        run: |
          SHOULD_PROCEED=false

          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "Triggered by push to develop branch"
            SHOULD_PROCEED=true
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.merged }}" = "true" ] && [ "${{ github.event.pull_request.base.ref }}" = "develop" ]; then
            echo "Triggered by merged PR to develop branch"
            SHOULD_PROCEED=true
          fi

          echo "should_proceed=$SHOULD_PROCEED" >> $GITHUB_OUTPUT

  # Run comprehensive tests on develop
  test-develop:
    name: Test Develop Branch
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should_proceed == 'true'
    outputs:
      tests_passed: ${{ steps.tests.outputs.tests_passed }}
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker for RabbitMQ
        run: |
          echo "Starting RabbitMQ with streams plugin for integration tests..."
          docker run -d --name rabbitmq-integration \
            -p 5672:5672 \
            -p 15672:15672 \
            -e RABBITMQ_DEFAULT_USER=guest \
            -e RABBITMQ_DEFAULT_PASS=guest \
            rabbitmq:4-management

          echo "Waiting for RabbitMQ to start..."
          sleep 15

          echo "Enabling RabbitMQ streams plugin..."
          docker exec rabbitmq-integration rabbitmq-plugins enable rabbitmq_stream

          echo "Waiting for plugin to initialize..."
          sleep 10

          echo "RabbitMQ with streams plugin is ready"

      - name: Run comprehensive test suite
        id: tests
        run: |
          echo "Running comprehensive test suite on develop branch..."

          # 1. Run unit tests with race detection
          echo "Running unit tests with race detection..."
          if ! go test -race -short -v ./...; then
            echo "Unit tests failed"
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Unit tests passed"

          # 2. Run integration tests
          echo "Running integration tests..."
          if ! go test -race -v ./...; then
            echo "Integration tests failed"
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Integration tests passed"

          # 3. Run linting
          echo "Running linting..."
          if command -v golangci-lint &> /dev/null; then
            if ! golangci-lint run; then
              echo "Linting failed"
              echo "tests_passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "Linting passed"
          else
            echo "golangci-lint not available, skipping lint check"
          fi

          # 4. Verify modules
          echo "Verifying Go modules..."
          if ! go mod verify; then
            echo "Module verification failed"
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Module verification passed"

          # 5. Check for any uncommitted changes
          echo "Checking for uncommitted changes..."
          if ! git diff --quiet; then
            echo "Uncommitted changes detected"
            git status
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "No uncommitted changes"

          echo "All tests and checks passed!"
          echo "tests_passed=true" >> $GITHUB_OUTPUT

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker stop rabbitmq-integration || true
          docker rm rabbitmq-integration || true

  # Merge develop to main if tests pass
  merge-to-main:
    name: Merge to Main
    runs-on: ubuntu-latest
    needs: [check-trigger, test-develop]
    if: needs.check-trigger.outputs.should_proceed == 'true' && needs.test-develop.outputs.tests_passed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if main is behind develop
        id: check_behind
        run: |
          git fetch origin main develop

          # Check if main is behind develop
          BEHIND_COUNT=$(git rev-list --count origin/main..origin/develop)
          echo "Main is $BEHIND_COUNT commits behind develop"

          if [ "$BEHIND_COUNT" -gt 0 ]; then
            echo "needs_merge=true" >> $GITHUB_OUTPUT
            echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
          else
            echo "needs_merge=false" >> $GITHUB_OUTPUT
            echo "Main branch is up to date with develop"
          fi

      - name: Merge develop to main
        if: steps.check_behind.outputs.needs_merge == 'true'
        run: |
          echo "Merging develop to main..."

          # Checkout main branch
          git checkout main
          git pull origin main

          # Get commit info for merge message
          BEHIND_COUNT="${{ steps.check_behind.outputs.behind_count }}"
          LATEST_COMMIT=$(git log origin/develop --oneline -1)

          # Merge develop into main
          git merge origin/develop --no-ff -m "Auto-merge: Merge develop to main

          Automatically merging $BEHIND_COUNT commit(s) from develop to main.

          Latest commit: $LATEST_COMMIT

          All tests passed on develop branch:
          - Unit tests with race detection
          - Integration tests with RabbitMQ streams
          - Linting and code quality checks
          - Module verification

          Auto-generated by merge workflow"

          # Push to main
          git push origin main

          echo "Successfully merged develop to main"

      - name: Create summary
        if: steps.check_behind.outputs.needs_merge == 'true'
        run: |
          echo "## Auto-Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Successfully merged develop to main" >> $GITHUB_STEP_SUMMARY
          echo "**Commits merged**: ${{ steps.check_behind.outputs.behind_count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tests**: All passed (unit, integration, linting, module verification)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The main branch now contains the latest changes from develop and is ready for release." >> $GITHUB_STEP_SUMMARY

      - name: Skip merge if not needed
        if: steps.check_behind.outputs.needs_merge == 'false'
        run: |
          echo "## Auto-Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: No merge needed" >> $GITHUB_STEP_SUMMARY
          echo "**Reason**: Main branch is already up to date with develop" >> $GITHUB_STEP_SUMMARY

  # Notify about merge results
  notify-merge:
    name: Notify Merge Results
    runs-on: ubuntu-latest
    needs: [test-develop, merge-to-main]
    if: always() && needs.test-develop.outputs.tests_passed == 'true'
    steps:
      - name: Notify success
        if: needs.merge-to-main.result == 'success'
        run: |
          echo "Auto-merge workflow completed successfully"
          echo "Develop branch tests passed"
          echo "Changes merged to main branch"
          echo "Ready for auto-release"

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != '' && needs.merge-to-main.result == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "go-rabbitmq: Auto-merge completed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*go-rabbitmq Auto-merge Completed*\n\n• All tests passed on develop\n• Changes merged to main branch\n• Ready for automatic release\n\n<https://github.com/cloudresty/go-rabbitmq/tree/main|View Main Branch>"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Handle test failures
  notify-failure:
    name: Notify Test Failures
    runs-on: ubuntu-latest
    needs: [test-develop]
    if: always() && needs.test-develop.outputs.tests_passed == 'false'
    steps:
      - name: Notify failure
        run: |
          echo "Auto-merge workflow failed"
          echo "Tests failed on develop branch"
          echo "Merge to main blocked"

      - name: Send failure notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "go-rabbitmq: Auto-merge failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*go-rabbitmq Auto-merge Failed*\n\n• Tests failed on develop branch\n• Merge to main blocked\n• Manual intervention required\n\n<https://github.com/cloudresty/go-rabbitmq/actions|View Actions>"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
